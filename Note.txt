https://www.youtube.com/watch?v=af4ZQJ14yu8

frontend.center/ep3/demo1
frontend.center/ep3/demo2
https://frontend.center/

https://github.com/Annie-Huang/inline-SVG-demo-1

------------

D:\react>mkdir inline-SVG-demo-1
D:\react>cd inline-SVG-demo-1
D:\react\inline-SVG-demo-1>git init
D:\react\inline-SVG-demo-1>git remote add origin git@github.com:Annie-Huang/inline-SVG-demo-1.git
D:\react\inline-SVG-demo-1>git add .
D:\react\inline-SVG-demo-1>git commit
D:\react\inline-SVG-demo-1>git push -u origin master

<svg viewBox="0 0 20 20">	<< box size is 20x20. Aspect Ratio: 1:1. 1px insdie SVG = 1/20 of drawing
----------
<svg viewBox="0 0 20 20" width="1rem">		<< we don't need to enter the height. It will look at the ratio and figure out the height.
----------
<path d="M0 0 L10 10"></path>		<< from position 0 0, draw a line of position 10 10
----------
<path d="M0 0 L10 10 L0 20"></path>	<< and then continue to draw the line to 0 20. L just means line
----------
<path d="M0 0 L10 10 L0 20" fill="none" stroke="black"></path>
					<< I don't want the triangle, i want the line.
----------
presentational attribute like fill and stroke has the lowest specificity, and can be overriden in css.
<path d="M0 0 L10 10 L0 20" fill="none" stroke="black"></path>
.Icon path {
    stroke: red;
    stroke-width: 2px;
}
----------
<path d="M0 0 L10 10 L0 20"></path>
.Icon path {
    stroke: black;
    stroke-width: 2px;
    fill: none;
}
	<< move fill and stroke to css.

----------
<input class="Input" type="text"
       placeholder="Username" name="username">
<svg viewBox="0 0 20 20" class="Icon">
    <path d="M0 0 L10 10 L0 20"></path>
</svg>
.Input:focus + .Icon {
    opacity: 1;
}
	<< shift svg behind the input so we can use + in css

-----------
.Icon {
    ...
    order: -1;
}
	<< trick to shift the icon to the left since we are flex box.

-----------
.Icon {

    transition: all 0.5s;
    transform: translateX(-100%);
}

.Input:focus + .Icon {
    transform: translateX(0);

}
	<< add animation.

-------------
stroke-dasharray: 5;		<< dash and gap as the same size.
stroke-dasharray: 12;
stroke-dasharray: 13;
stroke-dasharray: 5, 1;		<< dash is 5 and gap is 1

stroke-dashoffset: 4;		<< change start point of these calcualtions. positive value shift the line backwards and negative value shift the line forwards
stroke-dashoffset: 8;

start at center and grow outwards when focus.
stroke-dasharray: 1, 20;	<< give us a point
stroke-dashoffset: -12;		<< changing the offset to give us the mid point

$0.getTotalLength() / 2 - 0.5	<< subtract by 0.5 because our dot is 1 pix long

------------------

<svg class="Line" viewBox="0 0 40 2">		<< 2px heigh and 40px width
    <path d=""></path>				<< simple path straight down the middle from left to right
</svg>

.Line {
    width: 100%;
    stroke: black;
}

---------------------

.Line {
    width: 100%;
    height: 2px;		<< by default a svg with a view box will preserve the aspect ratio of the drawing as well as keeping the viewbox visiable 
    stroke: black;
}

--------------------

.Line {
    width: 100%;
    height: 2px;
    /*stroke: black;*/
    stroke: hsl(0, 0%, 75%);
    margin-left: 1rem;
}

.Line .focus {
    stroke: black;
}

	<< two lines. First is light and the second one is black












